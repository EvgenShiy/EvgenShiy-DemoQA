plugins {
    id 'java'
    id 'java-library'
    id 'io.qameta.allure' version '2.12.0'
    id "io.freefair.lombok" version "8.11"
}

repositories {
    mavenCentral()
}

def selenideVersion = "7.6.1",
    restAssuredVersion = "5.3.1",
    allureVersion = "2.29.0"

allure {
    report {
        version.set(allureVersion) // Common Allure version for API and UI tests
    }
    adapter {
        aspectjWeaver.set(true) // Enable @Step annotation handling
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    // Common dependencies
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:5.10.0",
            "org.slf4j:slf4j-simple:2.0.16",  //TODO найти актуальную версию 2.0.7
            "org.aeonbits.owner:owner:1.0.12",
            'org.slf4j:slf4j-api:2.0.16', //TODO найти актуальную версию 2.0.9
            //'ch.qos.logback:logback-classic:1.4.12',
            'org.aspectj:aspectjweaver:1.9.7'
    )

    // API-specific dependencies
    testImplementation(
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2",
            "org.assertj:assertj-core:3.24.2"
    )

    // UI-specific dependencies
    testImplementation(
            'com.github.javafaker:javafaker:1.0.2',
            // 'org.apache.logging.log4j:log4j-core:2.20.0',
             'io.github.bonigarcia:webdrivermanager:5.9.2' //TODO УБРАТЬ
    )

    // Runtime dependencies
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.2')
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task api(type: Test) {
    useJUnitPlatform {
        includeTags("API")
    }
}

task ui(type: Test) {
    useJUnitPlatform {
        includeTags("UI")
    }
}

println "TestType: ${project.hasProperty('TestType') ? project.TestType : 'not set'}"

sourceSets {
    test {
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}